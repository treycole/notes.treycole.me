import { CustomRenderPipe } from 'pixi.js/lib/scene/container/CustomRenderPipe';
import { RenderGroupPipe } from 'pixi.js/lib/scene/container/RenderGroupPipe';
import { RenderGroupSystem } from 'pixi.js/lib/scene/container/RenderGroupSystem';
import { SpritePipe } from 'pixi.js/lib/scene/sprite/SpritePipe';
import { RendererInitHook } from 'pixi.js/lib/utils/global/globalHooks';
import { BatcherPipe } from 'pixi.js/lib/rendering/batcher/shared/BatcherPipe';
import { AlphaMaskPipe } from 'pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe';
import { ColorMaskPipe } from 'pixi.js/lib/rendering/mask/color/ColorMaskPipe';
import { StencilMaskPipe } from 'pixi.js/lib/rendering/mask/stencil/StencilMaskPipe';
import { BackgroundSystem } from 'pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem';
import { BlendModePipe } from 'pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe';
import { ExtractSystem } from 'pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem';
import { GenerateTextureSystem } from 'pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem';
import { GlobalUniformSystem } from 'pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem';
import { SchedulerSystem } from 'pixi.js/lib/rendering/renderers/shared/SchedulerSystem';
import { HelloSystem } from 'pixi.js/lib/rendering/renderers/shared/startup/HelloSystem';
import { RenderableGCSystem } from 'pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem';
import { TextureGCSystem } from 'pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem';
import { ViewSystem } from 'pixi.js/lib/rendering/renderers/shared/view/ViewSystem';
import type { ExtractRendererOptions } from 'pixi.js/lib/rendering/renderers/shared/system/utils/typeUtils';
export declare const SharedSystems: (typeof BackgroundSystem | typeof GlobalUniformSystem | typeof HelloSystem | typeof ViewSystem | typeof RenderGroupSystem | typeof TextureGCSystem | typeof GenerateTextureSystem | typeof ExtractSystem | typeof RendererInitHook | typeof RenderableGCSystem | typeof SchedulerSystem)[];
export declare const SharedRenderPipes: (typeof BlendModePipe | typeof BatcherPipe | typeof SpritePipe | typeof RenderGroupPipe | typeof AlphaMaskPipe | typeof StencilMaskPipe | typeof ColorMaskPipe | typeof CustomRenderPipe)[];
/**
 * Options for the shared systems of a renderer.
 * @memberof rendering
 */
export interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions {
    /**
     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.
     * It is false by default, and means PixiJS will load all the default extensions, based
     * on the environment e.g browser/webworker.
     * If you set this to true, then you will need to manually import the systems and extensions you need.
     *
     * e.g.
     * ```js
     * import 'accessibility';
     * import 'app';
     * import 'events';
     * import 'spritesheet';
     * import 'graphics';
     * import 'mesh';
     * import 'text';
     * import 'text-bitmap';
     * import 'text-html';
     * import { autoDetectRenderer } from 'pixi.js';
     *
     * const renderer = await autoDetectRenderer({
     *   width: 800,
     *   height: 600,
     *   skipExtensionImports: true,
     * });
     * ```
     * @default false
     */
    skipExtensionImports?: boolean;
    /**
     * @default true
     * @deprecated since 8.1.6
     * @see `skipExtensionImports`
     */
    manageImports?: boolean;
}
